module demo {

  typedef string<256> transactionId;
  // globally unique, transactionId + '-' + increment
  typedef string id;
  typedef unsigned long long time;
  typedef sequence<octet> byteSeq;

  // https://github.com/multiformats/multihash
  typedef string multihash;

  // https://github.com/multiformats/multibase
  // from text to binary explicitly, then to data implicitly
  typedef string multibase;

  // https://github.com/multiformats/multiaddr
  typedef string multiaddr;

  // https://github.com/multiformats/multicodec
  // from binary to data explicitly
  typedef sequence<octet> multicodec;

  // in-line
  struct multilang {
    string En;
    string Zh;
    string Cn;
  };

  // public key
  struct pubKey {
    // e.g. RSA using modulus and public exponent, or PEM format
    string Method;
    sequence<octet> PubKey;
  };

  struct user_pubKey {
    id Id;
    id UserId;
    pubKey PubKey;
  };

  struct signature {
    // links to public key
    id SignerUserPubKeyId;
    // e.g. RSA
    string Method;
    sequence<octet> Signature;
  };

  // both public and private key
  struct keyPair {
    // e.g. RSA PEM
    string Method;
    // PEM, json, base64 or any way specified by Method
    multibase Content;
  };

  // general event to cancel something
  struct expire {
    id Id;
    // the object to be discarded
    id TargetId;
    time ExpireTime;
    string Reason;
    signature Signature;
  };

  struct user {
    id Id;
    // free text
    string UserName;
    // at least one, each for a device
    sequence<pubKey> UserPubKeySeq;
    // self signed
    signature Signature;
  };

  struct group {
    id Id;
    string GroupName;
    pubKey GroupPubKey;
    // user id of the founder
    id CreatorId;
    // self signed by group
    signature Signature;
  };

  struct user_group {
    id Id;
    id GroupId;
    id UserId;
    /*
    .Values of Action
    |===
    | code | meaning
    | 0x00 | join
    | 0x01 | quit
    |===
    */
    octet Action;
    // signed by user
    signature Signature;
  };

  // only for join group
  struct endorse_user_group {
    id Id;
    // transaction id of the user_group proposal
    id UserGroupId;
    // user id of a group member
    id Endorser;
    // signed by the endorser
    signature Signature;
  };

};
